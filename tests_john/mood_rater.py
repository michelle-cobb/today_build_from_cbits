# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re

class MoodRater(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = "http://localhost:8080/"
        self.verificationErrors = []
        self.accept_next_alert = True
    
    def test_mood_rater(self):
        driver = self.driver
	driver.get(self.base_url)
	driver.get(self.base_url)
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling very upset[\s\S]$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Five Senses", driver.find_element_by_xpath("(//input[@name='nextButton'])[7]").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[5]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling bored[\s\S] Try these tips to get you going!$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[6]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling stressed[\s\S]$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-7").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[7]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling lonely[\s\S]$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-8").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-19").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("If you're feeling angry, these activities are meant to cool you down!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-8").click()
        driver.find_element_by_id("feelingsChecklist-7").click()
        driver.find_element_by_id("feelingsChecklist-6").click()
        driver.find_element_by_id("feelingsChecklist-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-8").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling down[\s\S] These activities are meant to help you start feeling better! Give them a try!$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-4").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-2").click()
        driver.find_element_by_id("withPeople-6").click()
        driver.find_element_by_id("withPeople-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[3]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Worried[\s\S] We can help with that! Try these tips to help soothe your nerves!$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-7").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-7").click()
        driver.find_element_by_id("feelingsChecklist-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-9").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-9").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-10").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-10").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-2").click()
        driver.find_element_by_id("feelingsChecklist-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1").click()
        driver.find_element_by_id("moodOverall-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("feelingsChecklist-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-12").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div/div[4]/h3").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("feelingsChecklist-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-4").click()
        driver.find_element_by_id("withPeople-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-14").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-bar-chart").click()
        driver.find_element_by_id("mood-graph").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-bar-chart").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("i.icon-envelope").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_name("nextButton").click()
        Select(driver.find_element_by_id("feeling")).select_by_visible_text("Sad")
        Select(driver.find_element_by_id("withPerson")).select_by_visible_text("I'm alone")
        Select(driver.find_element_by_id("conversationType")).select_by_visible_text("Not talking to anyone")
        Select(driver.find_element_by_id("location")).select_by_visible_text("My Bedroom")
        Select(driver.find_element_by_id("physicalEffort")).select_by_visible_text("Sitting")
        driver.find_element_by_id("situationBasedMessage").clear()
        driver.find_element_by_id("situationBasedMessage").send_keys("You're sitting around your bedroom by yourself, not doing anything, and feeling sad.  Go out and take a walk!")
        driver.find_element_by_id("cardLabel").clear()
        driver.find_element_by_id("cardLabel").send_keys("in bedroom alone and sad")
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-4").click()
        driver.find_element_by_id("feelingsChecklist-6").click()
        driver.find_element_by_id("feelingsChecklist-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("You're sitting around your bedroom by yourself, not doing anything, and feeling sad.  Go out and take a walk!", driver.find_element_by_css_selector("h3").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("//div[@id='simplemodal-data']/div/i").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("i.icon-envelope").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_name("nextButton").click()
        Select(driver.find_element_by_id("feeling")).select_by_visible_text("Mad")
        Select(driver.find_element_by_id("withPerson")).select_by_visible_text("Mother")
        Select(driver.find_element_by_id("conversationType")).select_by_visible_text("Arguing")
        Select(driver.find_element_by_id("location")).select_by_visible_text("Relative's Home")
        Select(driver.find_element_by_id("physicalEffort")).select_by_visible_text("Standing")
        Select(driver.find_element_by_id("physicalEffort")).select_by_visible_text("Any")
        driver.find_element_by_id("situationBasedMessage").clear()
        driver.find_element_by_id("situationBasedMessage").send_keys("You're at your relative's home arguing with your mother, feeling angry, and any level of physical exertion. Take a breather!")
        driver.find_element_by_id("cardLabel").clear()
        driver.find_element_by_id("cardLabel").send_keys("arguing with mother")
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-2").click()
        driver.find_element_by_id("feelingsChecklist-7").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("You're at your relative's home arguing with your mother, feeling angry, and any level of physical exertion. Take a breather!", driver.find_element_by_css_selector("h3").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("//div[@id='simplemodal-data']/div/i").click()
    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException, e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
