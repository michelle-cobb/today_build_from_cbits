#!/cygdrive/c/Python27/python.exe
# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re

class FinishLessonOne(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = "http://localhost:8080/"
        self.verificationErrors = []
        self.accept_next_alert = True
    
    def test_finish_lesson_one(self):
        driver = self.driver
	driver.get(self.base_url)
	driver.get(self.base_url)
        driver.find_element_by_css_selector("i.icon-lightbulb").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div/div/div").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_name("lessonNextButton").click()
        driver.find_element_by_name("lessonNextButton").click()
        driver.find_element_by_name("lessonNextButton").click()
        driver.find_element_by_name("lessonNextButton").click()
        driver.find_element_by_name("lessonNextButton").click()
        driver.find_element_by_name("lessonNextButton").click()
        driver.find_element_by_name("lessonNextButton").click()
        driver.find_element_by_name("lessonNextButton").click()
        driver.find_element_by_name("lessonFinishButton").click()
        try: self.assertEqual("Daily Scoop", driver.find_element_by_css_selector("h3").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Contact Your Coach", driver.find_element_by_xpath("//div[@id='mainContainer']/div/div[9]/h3").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
    
    def test_thought_record(self):
        driver = self.driver
	driver.get(self.base_url)
	driver.get(self.base_url)
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div[3]/div/h3").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_id("situation").clear()
        driver.find_element_by_id("situation").send_keys("I lost my dog")
        Select(driver.find_element_by_id("emotion")).select_by_visible_text("Depressed")
        driver.find_element_by_id("thought").clear()
        driver.find_element_by_id("thought").send_keys("I'll never find him or see him again.")
        driver.find_element_by_id("automaticThought-0").click()
        driver.find_element_by_id("automaticThought-2").click()
        driver.find_element_by_id("automaticThought-6").click()
        driver.find_element_by_id("automaticThought-10").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("alternateThought").clear()
        driver.find_element_by_id("alternateThought").send_keys("I might find him and get him back")
        driver.find_element_by_id("nowAsk").clear()
        driver.find_element_by_id("nowAsk").send_keys("Hopeful")
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        try: self.assertEqual("I lost my dog", driver.find_element_by_css_selector("dd").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("I'll never find him or see him again.", driver.find_element_by_xpath("//ul[@id='today-list']/li/dl/dd[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("I might find him and get him back", driver.find_element_by_xpath("//ul[@id='today-list']/li/dl/dd[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [ERROR: Unsupported command [selectWindow | null | ]]
        driver.find_element_by_id("today-list-icon0").click()
        try: self.assertEqual("I lost my dog", driver.find_element_by_id("situation").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [ERROR: Unsupported command [getSelectedLabel | id=emotion | ]]
        try: self.assertEqual("I'll never find him or see him again.", driver.find_element_by_id("thought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("I might find him and get him back", driver.find_element_by_id("alternateThought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Hopeful", driver.find_element_by_id("nowAsk").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div[3]/div").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("", driver.find_element_by_id("situation").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_id("thought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [ERROR: Unsupported command [getSelectedLabel | id=emotion | ]]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        driver.find_element_by_id("situation").clear()
        driver.find_element_by_id("situation").send_keys("I forgot to walk Luna")
        Select(driver.find_element_by_id("emotion")).select_by_visible_text("Anxious")
        driver.find_element_by_id("thought").clear()
        driver.find_element_by_id("thought").send_keys("She's going to get mad and tear up my house.")
        driver.find_element_by_id("automaticThought-1").click()
        driver.find_element_by_id("automaticThought-6").click()
        driver.find_element_by_id("automaticThought-8").click()
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("", driver.find_element_by_id("alternateThought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_id("nowAsk").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("alternateThought").clear()
        driver.find_element_by_id("alternateThought").send_keys("There's nothing in my house that Luna hasn't already torn up, so there's nothing to worry about.")
        driver.find_element_by_id("nowAsk").clear()
        driver.find_element_by_id("nowAsk").send_keys("neutral")
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        try: self.assertEqual("I lost my dog", driver.find_element_by_css_selector("dd").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("I'll never find him or see him again.", driver.find_element_by_xpath("//ul[@id='today-list']/li/dl/dd[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("I might find him and get him back", driver.find_element_by_xpath("//ul[@id='today-list']/li/dl/dd[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("I forgot to walk Luna", driver.find_element_by_css_selector("li.Anxious > dl.today-description > dd").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("She's going to get mad and tear up my house.", driver.find_element_by_xpath("//ul[@id='today-list']/li[2]/dl/dd[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("There's nothing in my house that Luna hasn't already torn up, so there's nothing to worry about.", driver.find_element_by_xpath("//ul[@id='today-list']/li[2]/dl/dd[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [ERROR: Unsupported command [selectWindow | null | ]]
        driver.find_element_by_id("today-list-icon0").click()
        try: self.assertEqual("I lost my dog", driver.find_element_by_id("situation").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [ERROR: Unsupported command [getSelectedLabel | id=emotion | ]]
        try: self.assertEqual("I'll never find him or see him again.", driver.find_element_by_id("thought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("I might find him and get him back", driver.find_element_by_id("alternateThought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Hopeful", driver.find_element_by_id("nowAsk").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div[3]/div").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        # ERROR: Caught exception [ERROR: Unsupported command [selectWindow | null | ]]
        driver.find_element_by_id("today-list-icon1").click()
        try: self.assertEqual("I forgot to walk Luna", driver.find_element_by_id("situation").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("She's going to get mad and tear up my house.", driver.find_element_by_id("thought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [ERROR: Unsupported command [getSelectedLabel | id=emotion | ]]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        driver.find_element_by_id("situation").clear()
        driver.find_element_by_id("situation").send_keys("New Situation")
        Select(driver.find_element_by_id("emotion")).select_by_visible_text("\"Blah\"")
        driver.find_element_by_id("thought").clear()
        driver.find_element_by_id("thought").send_keys("New Thought")
        driver.find_element_by_id("automaticThought-1").click()
        driver.find_element_by_id("automaticThought-6").click()
        driver.find_element_by_id("automaticThought-8").click()
        driver.find_element_by_id("automaticThought-3").click()
        driver.find_element_by_id("automaticThought-5").click()
        driver.find_element_by_id("automaticThought-10").click()
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("There's nothing in my house that Luna hasn't already torn up, so there's nothing to worry about.", driver.find_element_by_id("alternateThought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("neutral", driver.find_element_by_id("nowAsk").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("alternateThought").clear()
        driver.find_element_by_id("alternateThought").send_keys("New Alternate Thought")
        driver.find_element_by_id("nowAsk").clear()
        driver.find_element_by_id("nowAsk").send_keys("New Emotion")
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div[3]/div").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        # ERROR: Caught exception [ERROR: Unsupported command [selectWindow | null | ]]
        driver.find_element_by_id("today-list-icon1").click()
        try: self.assertEqual("New Situation", driver.find_element_by_id("situation").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("New Thought", driver.find_element_by_id("thought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [ERROR: Unsupported command [getSelectedLabel | id=emotion | ]]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        # ERROR: Caught exception [Error: locator strategy either id or name must be specified explicitly.]
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("New Alternate Thought", driver.find_element_by_id("alternateThought").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("New Emotion", driver.find_element_by_id("nowAsk").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
    
    def test_mood_rater(self):
        driver = self.driver
	driver.get(self.base_url)
	driver.get(self.base_url)
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling very upset[\s\S]$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Five Senses", driver.find_element_by_xpath("(//input[@name='nextButton'])[7]").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[5]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling bored[\s\S] Try these tips to get you going!$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[6]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling stressed[\s\S]$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-7").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[7]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling lonely[\s\S]$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-8").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-19").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("If you're feeling angry, these activities are meant to cool you down!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-8").click()
        driver.find_element_by_id("feelingsChecklist-7").click()
        driver.find_element_by_id("feelingsChecklist-6").click()
        driver.find_element_by_id("feelingsChecklist-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-8").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Feeling down[\s\S] These activities are meant to help you start feeling better! Give them a try!$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-4").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-2").click()
        driver.find_element_by_id("withPeople-6").click()
        driver.find_element_by_id("withPeople-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Let's turn it around!", driver.find_element_by_css_selector("h1").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("We hear you-- you're not feeling good. Try turning your mood around by doing an In the Moment Tool.", driver.find_element_by_css_selector("p").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("(//input[@name='nextButton'])[3]").click()
        try: self.assertRegexpMatches(driver.find_element_by_css_selector("h2").text, r"^exact:Worried[\s\S] We can help with that! Try these tips to help soothe your nerves!$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-7").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-7").click()
        driver.find_element_by_id("feelingsChecklist-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-9").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-9").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("feelingsChecklist-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-10").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-10").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-2").click()
        driver.find_element_by_id("feelingsChecklist-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1").click()
        driver.find_element_by_id("moodOverall-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("feelingsChecklist-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-12").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div/div[4]/h3").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("feelingsChecklist-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-4").click()
        driver.find_element_by_id("withPeople-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-6").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-14").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-4").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("Thanks for checking in!", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-bar-chart").click()
        driver.find_element_by_id("mood-graph").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-bar-chart").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("i.icon-envelope").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_name("nextButton").click()
        Select(driver.find_element_by_id("feeling")).select_by_visible_text("Sad")
        Select(driver.find_element_by_id("withPerson")).select_by_visible_text("I'm alone")
        Select(driver.find_element_by_id("conversationType")).select_by_visible_text("Not talking to anyone")
        Select(driver.find_element_by_id("location")).select_by_visible_text("My Bedroom")
        Select(driver.find_element_by_id("physicalEffort")).select_by_visible_text("Sitting")
        driver.find_element_by_id("situationBasedMessage").clear()
        driver.find_element_by_id("situationBasedMessage").send_keys("You're sitting around your bedroom by yourself, not doing anything, and feeling sad.  Go out and take a walk!")
        driver.find_element_by_id("cardLabel").clear()
        driver.find_element_by_id("cardLabel").send_keys("in bedroom alone and sad")
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-dashboard").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-4").click()
        driver.find_element_by_id("feelingsChecklist-6").click()
        driver.find_element_by_id("feelingsChecklist-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-0").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("You're sitting around your bedroom by yourself, not doing anything, and feeling sad.  Go out and take a walk!", driver.find_element_by_css_selector("h3").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("//div[@id='simplemodal-data']/div/i").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("i.icon-envelope").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_name("nextButton").click()
        Select(driver.find_element_by_id("feeling")).select_by_visible_text("Mad")
        Select(driver.find_element_by_id("withPerson")).select_by_visible_text("Mother")
        Select(driver.find_element_by_id("conversationType")).select_by_visible_text("Arguing")
        Select(driver.find_element_by_id("location")).select_by_visible_text("Relative's Home")
        Select(driver.find_element_by_id("physicalEffort")).select_by_visible_text("Standing")
        Select(driver.find_element_by_id("physicalEffort")).select_by_visible_text("Any")
        driver.find_element_by_id("situationBasedMessage").clear()
        driver.find_element_by_id("situationBasedMessage").send_keys("You're at your relative's home arguing with your mother, feeling angry, and any level of physical exertion. Take a breather!")
        driver.find_element_by_id("cardLabel").clear()
        driver.find_element_by_id("cardLabel").send_keys("arguing with mother")
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("div.widget.size_height1 > h3").click()
        driver.find_element_by_id("moodOverall-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("feelingsChecklist-2").click()
        driver.find_element_by_id("feelingsChecklist-7").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("withPeople-3").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("conversationType-1").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("location-5").click()
        driver.find_element_by_id("assessmentNextButton").click()
        driver.find_element_by_id("physicalEffort-2").click()
        driver.find_element_by_id("assessmentNextButton").click()
        try: self.assertEqual("You're at your relative's home arguing with your mother, feeling angry, and any level of physical exertion. Take a breather!", driver.find_element_by_css_selector("h3").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_xpath("//div[@id='simplemodal-data']/div/i").click()

    def test_positive_activity_list(self):
        driver = self.driver
	driver.get(self.base_url)
	driver.get(self.base_url)
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("i.icon-camera-retro").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_id("outAndAboutTown-0").click()
        driver.find_element_by_id("outAndAboutTown-23").click()
        driver.find_element_by_id("outAndAboutTown-22").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("beSocial-0").click()
        driver.find_element_by_id("beSocial-1").click()
        driver.find_element_by_id("beSocial-15").click()
        driver.find_element_by_id("beSocial-16").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("aloneTime-32").click()
        driver.find_element_by_id("aloneTime-31").click()
        driver.find_element_by_id("aloneTime-30").click()
        driver.find_element_by_id("aloneTime-29").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("pamperYourself-14").click()
        driver.find_element_by_id("pamperYourself-3").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("getInvolved-0").click()
        driver.find_element_by_id("getInvolved-7").click()
        driver.find_element_by_id("getInvolved-11").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("workUpASweat-0").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_css_selector("i.icon-camera-retro").click()
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("on", driver.find_element_by_id("outAndAboutTown-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("outAndAboutTown-22").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("outAndAboutTown-23").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-15").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-16").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-17").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-18").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-19").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-20").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-21").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("on", driver.find_element_by_id("beSocial-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("beSocial-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("beSocial-15").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("beSocial-16").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-17").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-18").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-19").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-20").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-21").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-22").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-23").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-24").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-29").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-30").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-31").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-32").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-15").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-16").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-17").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-18").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-19").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-20").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-21").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-22").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-23").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-24").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-25").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-26").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-27").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-28").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("pamperYourself-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("pamperYourself-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("on", driver.find_element_by_id("getInvolved-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("getInvolved-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("getInvolved-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("on", driver.find_element_by_id("workUpASweat-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-15").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-16").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-17").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-18").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-19").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-20").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-21").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-22").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-23").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-24").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-25").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-26").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-27").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-28").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-29").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-30").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-31").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-32").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("i.icon-calendar").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_css_selector("i.icon-question-sign").click()
        try: self.assertEqual("Make a gift for someone", driver.find_element_by_css_selector("li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Study", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Plan your career", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul/li[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Clean out your closet, get rid of things you don't need", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul/li[4]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Go on a date", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[2]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Accept an invitation to go out", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[2]/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Catch up with an old friend, reminisce about the past", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[2]/li[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Join a band or have a jam session", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[2]/li[4]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Join a gym", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[3]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Donate to charity", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[3]/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Join a club or organization, attend its meetings", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[3]/li[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Go to a street fair or carnival", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[4]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Go to a second-hand shop and try on something fun", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[4]/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Go to an arcade", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[4]/li[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Style your hair", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[5]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Eat a balanced meal", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[5]/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Take a quick walk", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[6]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("close").click()
        # now make sure we can add and remove things from the PA list, and it shows up in the list and the Planner link
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div/div[4]/h3").click()
        driver.find_element_by_css_selector("i.icon-camera-retro").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_id("outAndAboutTown-0").click()
        driver.find_element_by_id("outAndAboutTown-3").click()
        driver.find_element_by_id("outAndAboutTown-23").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("beSocial-1").click()
        driver.find_element_by_id("beSocial-10").click()
        driver.find_element_by_id("beSocial-15").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("aloneTime-32").click()
        driver.find_element_by_id("aloneTime-21").click()
        driver.find_element_by_id("aloneTime-0").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("pamperYourself-3").click()
        driver.find_element_by_id("pamperYourself-0").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("getInvolved-0").click()
        driver.find_element_by_id("getInvolved-2").click()
        driver.find_element_by_id("getInvolved-4").click()
        driver.find_element_by_name("saveButton").click()
        driver.find_element_by_id("workUpASweat-0").click()
        driver.find_element_by_id("workUpASweat-26").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div/div").click()
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("outAndAboutTown-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-15").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-16").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-17").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-18").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-19").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-20").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-21").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("outAndAboutTown-22").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("outAndAboutTown-23").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("on", driver.find_element_by_id("beSocial-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("beSocial-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-15").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("beSocial-16").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-17").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-18").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-19").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-20").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-21").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-22").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-23").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("beSocial-24").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-15").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-16").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-17").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-18").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-19").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-20").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-21").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-22").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-23").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-24").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-25").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-26").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-27").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-28").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-29").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-30").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("aloneTime-31").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("aloneTime-32").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("on", driver.find_element_by_id("pamperYourself-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("pamperYourself-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("pamperYourself-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("getInvolved-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("getInvolved-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("getInvolved-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("getInvolved-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("getInvolved-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("saveButton").click()
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-0").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-1").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-2").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-3").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-4").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-5").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-6").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-7").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-8").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-9").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-10").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-11").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-12").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-13").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-14").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-15").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-16").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-17").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-18").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-19").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-20").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-21").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-22").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-23").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-24").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-25").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("on", driver.find_element_by_id("workUpASweat-26").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-27").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-28").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-29").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-30").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-31").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("off", driver.find_element_by_id("workUpASweat-32").get_attribute("value"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div[2]/div/h3").click()
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_css_selector("i.icon-question-sign").click()
        try: self.assertEqual("Do artwork or crafts", driver.find_element_by_css_selector("li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Try a new food, cook a new dish", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Make a gift for someone", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul/li[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Study", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul/li[4]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Plan your career", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul/li[5]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        # Warning: verifyTextNotPresent may require manual changes
        try: self.assertNotRegexpMatches(driver.find_element_by_css_selector("BODY").text, r"^[\s\S]*closet[\s\S]*$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Go on a date", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[2]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Cook a meal for others, have a dinner party", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[2]/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Join a band or have a jam session", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[2]/li[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        # Warning: verifyTextNotPresent may require manual changes
        try: self.assertNotRegexpMatches(driver.find_element_by_css_selector("BODY").text, r"^[\s\S]*invitation[\s\S]*$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        # Warning: verifyTextNotPresent may require manual changes
        try: self.assertNotRegexpMatches(driver.find_element_by_css_selector("BODY").text, r"^[\s\S]*old friend[\s\S]*$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Take a class (like dance, music, cooking, art)", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[3]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Join a religious organization you like, attend its events", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[3]/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Donate to charity", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[3]/li[3]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Join a club or organization, attend its meetings", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[3]/li[4]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        # Warning: verifyTextNotPresent may require manual changes
        try: self.assertNotRegexpMatches(driver.find_element_by_css_selector("BODY").text, r"^[\s\S]*gym[\s\S]*$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Go to the zoo", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[4]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Go to a second-hand shop and try on something fun", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[4]/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        # Warning: verifyTextNotPresent may require manual changes
        try: self.assertNotRegexpMatches(driver.find_element_by_css_selector("BODY").text, r"^[\s\S]*arcade[\s\S]*$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        # Warning: verifyTextNotPresent may require manual changes
        try: self.assertNotRegexpMatches(driver.find_element_by_css_selector("BODY").text, r"^[\s\S]*street fair[\s\S]*$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Get dressed up", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[5]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Eat a balanced meal", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[5]/li[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        # Warning: verifyTextNotPresent may require manual changes
        try: self.assertNotRegexpMatches(driver.find_element_by_css_selector("BODY").text, r"^[\s\S]*hair[\s\S]*$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Stretch", driver.find_element_by_xpath("//div[@id='simplemodal-data']/ul[6]/li").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        # Warning: verifyTextNotPresent may require manual changes
        try: self.assertNotRegexpMatches(driver.find_element_by_css_selector("BODY").text, r"^[\s\S]*walk[\s\S]*$")
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_link_text("close").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div/div[4]/h3").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div/div/div").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div/div[2]/div/h3").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[10]").click()
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("Positive Activities List", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("h3").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div/div[3]/div").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[4]").click()
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("Positive Activities List", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("nextButton").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div/div/div").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div[3]/div").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("Positive Activities List", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("Get out and about town!", driver.find_element_by_css_selector("strong").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div/div/div").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div[3]/div").click()
        driver.find_element_by_css_selector("div > input[name=\"nextButton\"]").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("h3").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div/div/h3").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[12]").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_css_selector("i.icon-briefcase").click()
        driver.find_element_by_css_selector("h3").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[3]/div[2]/div").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div/div[4]/h3").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div/div/div").click()
        driver.find_element_by_css_selector("i.icon-random").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[3]").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_css_selector("i.icon-home.icon-4x").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div/div[4]/h3").click()
        driver.find_element_by_css_selector("h3").click()
        driver.find_element_by_xpath("//div[@id='mainContainer']/div[2]/div[5]/div[2]/div/h3").click()
        driver.find_element_by_xpath("(//input[@name='nextButton'])[2]").click()
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("Positive Activities List", driver.find_element_by_css_selector("h2").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_name("nextButton").click()
        try: self.assertEqual("Get out and about town!", driver.find_element_by_css_selector("strong").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException, e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
